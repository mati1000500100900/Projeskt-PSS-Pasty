{% extends 'base.html.twig' %}
{% block body %}
    <div class="card bg-dark text-white" id="vueForm">
        <div class="card-header">Dodaj pastę</div>
        <div class="card-body">
            <form method="post" action="{{ path('pasta_add') }}">
                <div class="form-group">
                    <textarea rows="6" class="form-control" name="content" v-model="content" id="contentInput" placeholder="Tresć"></textarea>
                </div>
                <div class="custom-file">
                    <label for="customFile">Obrazek relacyjny</label>
                    <input type="file" class="custom-file-input" id="customFile" @change="fileChosen">
                    <label class="custom-file-label" for="customFile"><[filename]></label>
                </div>
                <div v-if="showProgress" class="progress form-group">
                    <div class="progress-bar" id="fileUploadProgress" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" v-bind:style="{ width: progress + '%' }"></div>
                </div>
                <input type="text" name="imageName" id="imageName" v-model="imageName" hidden>
                <div class="form-group">
                    <input :disabled="disableSubmit" type="submit" class="btn btn-primary btn-block">
                </div>
            </form>
        </div>
    </div>
{% endblock %}

{% block javascripts%}
    <script src="{{ asset('assets/js/axios.js') }}"></script>
    <script src="{{ asset('assets/js/vue.js') }}"></script>
    <script src="{{ asset('assets/js/lodash.js') }}"></script>

    <script>
        var app = new Vue({
            el: '#vueForm',
            data: {
                content: '',
                disableSubmit: false,
                progress: 0,
                showProgress: false,
                filename: "Wybierz obrazek",
                imageName: "",
            },
            watch: {
                content: function (newContent, oldContent){
                    if(Math.abs(newContent.length-oldContent.length)>10){
                        this.testForDuplicates();
                    }
                    else{
                        this.debouncedGetAnswer();
                    }
                }
            },
            methods: {
                fileChosen(event) {
                    this.filename=event.target.files[0].name;
                    this.progress=0;
                    this.showProgress=true;
                    let data = new FormData();
                    data.append('file', event.target.files[0]);
                    let vc=this;
                    let config = {
                        onUploadProgress: function(progressEvent) {
                            vc.progress = Math.round( (progressEvent.loaded * 100) / progressEvent.total );
                        }
                    };
                    axios.post('/api/upload', data, config)
                        .then(function (res) {
                            vc.imageName=res.data.tid;
                        }).catch(function (err) {

                        });
                },
                testForDuplicates: function (){
                    if(this.content.length>200) {
                        let data=new FormData();
                        data.append('text',this.content);
                        let vm=this;
                        axios.post('/api/duplicates',data)
                            .then(function (res){
                                if(res.data.sure>0.8){
                                    toastr.error("Jest już taka pasta");
                                    vm.disableSubmit=true;
                                }
                                else{
                                    vm.disableSubmit=false;
                                }
                            }).catch(function (err){
                                toastr.error("Błąd przy sprawdzaniu");
                        });
                    }
                }
            },
            created: function () {
                this.debouncedGetAnswer = _.debounce(this.testForDuplicates, 2000)
            },
            delimiters: ['<[',']>']
        })

    </script>
{% endblock %}